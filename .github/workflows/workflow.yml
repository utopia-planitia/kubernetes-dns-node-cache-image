name: build and push container image

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME: ${{ github.repository }}

jobs:
  hadolint:
    name: lint Dockerfile(s)

    runs-on: ubuntu-22.04

    timeout-minutes: 2

    permissions:
      contents: read

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: lint Dockerfile(s)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          failure-threshold: style
          ignore: DL3018,DL4006

  docker-buildx:
    name: build (and push) container images

    needs: hadolint

    runs-on: ubuntu-22.04

    timeout-minutes: 5

    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: build the container image(s)
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: amd64
          push: false
          cache-to: type=local,dest=/tmp/.buildx-cache
          cache-from: type=registry,ref=${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:cache,ignore-error=true

      - name: extract iptables and kubernetes/dns versions from Dockerfile
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          set -eux
          IPTABLES_VERSION="$(grep -Eom1 'IPTABLES_VERSION=[0-9]+\.[0-9]+\.[0-9]+\S*' Dockerfile | cut -d= -f2)"
          echo "IPTABLES_VERSION=${IPTABLES_VERSION:?}" | tee -a "${GITHUB_ENV:?}"
          KUBERNETES_DNS_VERSION="$(grep -Eom1 'KUBERNETES_DNS_VERSION=[0-9]+\.[0-9]+\.[0-9]+\S*' Dockerfile | cut -d= -f2)"
          echo "KUBERNETES_DNS_VERSION=${KUBERNETES_DNS_VERSION:?}" | tee -a "${GITHUB_ENV:?}"

      # prepare container image tags from iptables and kubernetes/dns versions and container image labels from git metadata (repository url, commit hash, ...)
      - name: prepare container image labels and container image tags
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}
          tags: |
            type=match,pattern=^(\d+\.\d+\.\d+-iptables\d+\.\d+\.\d+\S*)$,group=1,value=${{ env.KUBERNETES_DNS_VERSION }}-iptables${{ env.IPTABLES_VERSION }}
            type=match,pattern=^(\d+\.\d+\.\d+-iptables\d+\.\d+\.\d+)\S*$,group=1,value=${{ env.KUBERNETES_DNS_VERSION }}-iptables${{ env.IPTABLES_VERSION }}
            type=match,pattern=^(\d+\.\d+\.\d+)-iptables\d+\.\d+\.\d+\S*$,group=1,value=${{ env.KUBERNETES_DNS_VERSION }}-iptables${{ env.IPTABLES_VERSION }}
          flavor: |
            latest=true

      - name: login to the container registry
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push the container image(s)
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        uses: docker/build-push-action@v4
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          platforms: amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=registry,ref=${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:cache,mode=max
